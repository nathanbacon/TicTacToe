//
//  MessagesViewController.swift
//  TicTacToeMessage
//
//  Created by Nathan Gelman on 1/31/18.
//  Copyright Â© 2018 Nathan Gelman. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        removeAllChildViewControllers()
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        
       presentViewController(for: activeConversation, with: presentationStyle)
    }
    
    // MARK: My Messenger Functions
    
    private func presentViewController(for conversation: MSConversation?, with presentationStyle: MSMessagesAppPresentationStyle) {
        removeAllChildViewControllers()
        var viewController: UIViewController
        
        if(presentationStyle == .expanded) {
            
            let ticTacViewController = TicTacToeViewController()

            ticTacViewController.delegate = self

            ticTacViewController.ticTacModel = TicTacToe(withSize: TicTacToe.defaultBoardSize)

            viewController = ticTacViewController
        } else {
            viewController = UIViewController()
            viewController.view.backgroundColor = UIColor.white
        }
        
        configureChildViewController(viewController)
        
    }
    
    func composeMessage(with queryItems: [URLQueryItem]?, with picture: UIImage?) {
        
        var urlComponents = URLComponents()
        urlComponents.queryItems = queryItems
    
        let layout = MSMessageTemplateLayout()
        layout.image = picture
        
        let message = MSMessage()
        
        message.url = urlComponents.url
        message.layout = layout
        
        activeConversation?.insert(message, completionHandler: nil)
    }
    
    // MARK: Helpers
    private func configureChildViewController(_ viewController: UIViewController) {
        addChildViewController(viewController)
        
        viewController.view.frame = view.bounds
        viewController.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(viewController.view)
        
        NSLayoutConstraint.activate([
            viewController.view.leftAnchor.constraint(equalTo: view.leftAnchor),
            viewController.view.rightAnchor.constraint(equalTo: view.rightAnchor),
            viewController.view.topAnchor.constraint(equalTo: view.topAnchor),
            viewController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
            ])
        
        viewController.didMove(toParentViewController: self)
    }
    
    private func removeAllChildViewControllers() {
        childViewControllers.forEach {
            $0.willMove(toParentViewController: nil)
            $0.view.removeFromSuperview()
            $0.removeFromParentViewController()
        }
    }

}

extension MessagesViewController: TicTacToeViewControllerDelegate {
    func didCommitMove(with controller: TicTacToeViewController) {
        composeMessage(with: nil, with: nil)
        dismiss()
    }
}
